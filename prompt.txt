nesses códigos:

color.ts
"""
// hue-variationion-value (HSV) 0 - 360

enum Colors {
    HTML = 5,
    URL = 120,
    AI = 120,
}

export default Colors;
"""

types.ts
"""
enum BlocklyTypes {
    htmlElement = 'htmlElement',
    htmlElementVariable = 'elementoHTML1',
    textVariable = 'variavelTextual1',
    urlVariable = 'variavelURL1',
}

export default BlocklyTypes;
"""

blocklyFields.ts
"""
type TypeBlocklyFieldText = {
    type: 'text';
    text: string;
}

type TypeBlocklyFieldVariable = {
    type: 'field_variable';
    name: string;
    variable: string;
    variableTypes: string[];
    dataType?: string;
};

type TypeBlocklyFieldInput = {
    type: 'field_input';
    name: string;
    text: string;
};

type TypeBlocklyFieldDropdown = {
    type: 'field_dropdown';
    name: string;
    options: [string, string][]; // [value, text]
};

type TypeBlocklyFieldCheckbox = {
    type: 'field_checkbox';
    name: string;
    checked: boolean;
};

type TypeBlocklyInputValue = {
    type: 'input_value';
    name: string;
};

type TypeBlocklyFields = TypeBlocklyFieldText | TypeBlocklyFieldVariable | TypeBlocklyFieldInput | TypeBlocklyFieldDropdown | TypeBlocklyFieldCheckbox | TypeBlocklyInputValue;

export default TypeBlocklyFields;
"""

blockConstructor.ts
"""
import * as Blockly from 'blockly';
import { javascriptGenerator, Order } from 'blockly/javascript';
import TypeColorBlock from '../../types/blockColor';
import TypeBlocklyFields from '../../types/blocklyFields';

const blockConstructorErrorHandling = (
  blockConfig: blockConstructorInterface
) => {
  if (
    blockConfig.hasOutput !== undefined &&
    blockConfig.hasNextConnection !== undefined
  ) {
    throw new Error(
      'A block cannot have output and next connection at the same time'
    );
  }

  if (
    blockConfig.hasOutput !== undefined &&
    blockConfig.hasPreviousConnection !== undefined
  ) {
    throw new Error(
      'A block cannot have output and previous connection at the same time'
    );
  }

  if (
    blockConfig.fields.filter((field) => field.type === 'text').length > 1
  ) {
    throw new Error('A block cannot have more than one text field');
  }

  if (
    blockConfig.fields.filter((field) => field.type === 'text').length === 0
  ) {
    throw new Error('A block must have at least one text field');
  }
};

type TypeConnection = string | string[] | null;

export type TypeBlockly = {
  kind: string;
  type: string;
};

interface blockConstructorInterface {
  colour: TypeColorBlock;
  hasNextConnection?: TypeConnection;
  hasPreviousConnection?: TypeConnection;
  hasOutput?: TypeConnection;
  helpUrl: string;
  name: string;
  fields: TypeBlocklyFields[];
  tooltip: string;
  generator?: (block: any, generator: any) => string;
}

const blockConstructor = (blockConfig: blockConstructorInterface): TypeBlockly => {
  blockConstructorErrorHandling(blockConfig);

  const {
    colour,
    hasNextConnection,
    hasPreviousConnection,
    hasOutput,
    helpUrl,
    name,
    fields,
    tooltip,
  } = blockConfig;

  const jsonInitExtra: {
    [key: string]: any;
  } = {};

  if (hasNextConnection !== undefined) {
    jsonInitExtra['nextStatement'] = hasNextConnection;
  }

  if (hasPreviousConnection !== undefined) {
    jsonInitExtra['previousStatement'] = hasPreviousConnection;
  }

  if (hasOutput !== undefined) {
    jsonInitExtra['output'] = hasOutput;
  }

  let message0 = '';
  let args0: any = [];

  fields.forEach((field, index) => {
    if (field.type === 'text') {
      message0 += field.text;
    };
  });

  fields.filter((field) => field.type !== 'text').forEach((field, index) => {
    args0.push(field);
  });

  Blockly.Blocks[name] = {
    init: function () {
      this.jsonInit({
        args0,
        colour,
        helpUrl,
        message0,
        tooltip,
        ...jsonInitExtra,
      });
    },
  };


  if (blockConfig.generator) {
    javascriptGenerator.forBlock[name] = blockConfig.generator;
  } else {
    javascriptGenerator.forBlock[name] = function (block, generator) {
      return '/* Generator not implemented */';
    };
  }

  return {
    kind: 'block',
    type: name,
  };
};

export default blockConstructor;
"""

e nesse exemplo de implementação

BlockNavigateToUrl.ts
"""
import * as Blockly from 'blockly/core';
import Colors from '../../config/colors';
import blockConstructor from '../../helpers/blockConstructor';

const setBlockNavigateToUrl = () => {
    return blockConstructor({
        colour: Colors.URL,
        hasPreviousConnection: null,
        hasNextConnection: null,
        helpUrl: 'https://developer.mozilla.org/en-US/docs/Web/API/Window/location',
        name: 'BlockNavigateToUrl',
        fields: [
            {
                type: 'text',
                text: 'navegar para URL %1',
            },
            {
                type: 'field_input',
                name: 'URL',
                text: 'https://exemplo.com', // valor padrão da URL
            }
        ],
        tooltip: 'Navega para uma nova URL, alterando a página atual.',
        generator: function (block: Blockly.Block, generator: any) {
            const urlValue = block.getFieldValue('URL');
            return `window.location.href = ${generator.quote_(urlValue)};\n`;
        }
    });
};

export default setBlockNavigateToUrl;
"""

Crie um BlockNavigateBack e um BlockNavigateForward para que o usuário possa navegar para trás e para frente no histórico do navegador.

!!! important: se precisar alterar um dos arquivos ou funções existentes, adicione na resposta o que deve mudar e onde !!!