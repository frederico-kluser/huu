blockGenerator.ts
"""
import { Block, CodeGenerator } from "blockly";

type TypeBlockGenerator = (block: Block, generator: CodeGenerator) => string | [string, number] | null

export default TypeBlockGenerator;
"""

color.ts
"""
// hue-variationion-value (HSV) 0 - 360

enum Colors {
    HTML = 5,
    URL = 220,
    AI = 120,
    MISCELLANEOUS = 300,
}

export default Colors;
"""

types.ts
"""
enum BlocklyTypes {
    htmlElement = 'htmlElement',
    htmlElementVariable = 'elementoHTML1',
    textVariable = 'variavelTextual1',
    textVariable2 = 'variavelTextual2',
    urlVariable = 'variavelURL1',
    promptVariable = 'variavelPrompt1',
}

export default BlocklyTypes;
"""

blocklyFields.ts
"""
type TypeBlocklyFieldText = {
    type: 'text';
    text: string;
}

type TypeBlocklyFieldVariable = {
    type: 'field_variable';
    name: string;
    variable: string;
    variableTypes: string[];
    dataType?: string;
};

type TypeBlocklyFieldInput = {
    type: 'field_input';
    name: string;
    text: string;
};

type TypeBlocklyFieldDropdown = {
    type: 'field_dropdown';
    name: string;
    options: [string, string][]; // [value, text]
};

type TypeBlocklyFieldCheckbox = {
    type: 'field_checkbox';
    name: string;
    checked: boolean;
};

export type TypeBlocklyInputValue = {
    type: 'input_value';
    name: string;
    check?: string | string[];
    shadow?: {
        type: 'text' | 'number';
        fields: {
            [key: string]: string | number;
        };
    },
};

type TypeBlocklyStatementInput = {
    type: 'input_statement';
    name: string;
};

type TypeBlocklyFields = TypeBlocklyFieldText | TypeBlocklyFieldVariable | TypeBlocklyFieldInput | TypeBlocklyFieldDropdown | TypeBlocklyFieldCheckbox | TypeBlocklyInputValue | TypeBlocklyStatementInput;

export default TypeBlocklyFields;
"""

blockConstructor.ts
"""
import * as Blockly from 'blockly';
import { javascriptGenerator } from 'blockly/javascript';
import TypeColorBlock from '../../types/blockColor';
import TypeBlocklyFields from '../../types/blocklyFields';
import TypeInputBlock from '../../types/blocklyInputs';
import TypeBlockGenerator from '../../types/blockGenerator';

const blockConstructorErrorHandling = (
  blockConfig: blockConstructorInterface
) => {
  if (
    blockConfig.hasOutput !== undefined &&
    blockConfig.hasNextConnection !== undefined
  ) {
    throw new Error(
      'A block cannot have output and next connection at the same time'
    );
  }

  if (
    blockConfig.hasOutput !== undefined &&
    blockConfig.hasPreviousConnection !== undefined
  ) {
    throw new Error(
      'A block cannot have output and previous connection at the same time'
    );
  }

  if (
    blockConfig.fields.filter((field) => field.type === 'text').length
  ) {
    throw new Error('A block cannot have a text field');
  }
};

type TypeConnection = string | string[] | null;

export type TypeBlockly = {
  kind: string;
  type: string;
};

interface blockConstructorInterface {
  colour: TypeColorBlock;
  fields: TypeBlocklyFields[];
  generator?: TypeBlockGenerator;
  hasNextConnection?: TypeConnection;
  hasOutput?: TypeConnection;
  hasPreviousConnection?: TypeConnection;
  helpUrl: string;
  inputs?: TypeInputBlock;
  message: string;
  name: string;
  tooltip: string;
}

const blockConstructor = (blockConfig: blockConstructorInterface): TypeBlockly => {
  blockConstructorErrorHandling(blockConfig);

  const {
    colour,
    fields,
    hasNextConnection,
    hasOutput,
    hasPreviousConnection,
    helpUrl,
    inputs,
    message,
    name,
    tooltip,
  } = blockConfig;

  const jsonInitExtra: {
    [key: string]: any;
  } = {};

  if (hasNextConnection !== undefined) {
    jsonInitExtra['nextStatement'] = hasNextConnection;
  }

  if (hasPreviousConnection !== undefined) {
    jsonInitExtra['previousStatement'] = hasPreviousConnection;
  }

  if (hasOutput !== undefined) {
    jsonInitExtra['output'] = hasOutput;
  }

  const message0 = message;
  let args0: any = [];

  fields.forEach((field, index) => {
    args0.push(field);
  });

  Blockly.Blocks[name] = {
    init: function () {
      this.jsonInit({
        args0,
        colour,
        helpUrl,
        message0,
        tooltip,
        ...jsonInitExtra,
      });

      fields.filter((field) => field.type === 'input_value' && !!field.shadow).forEach((field) => {
        const formattedField = field as any;

        const selectorInput = this.getInput(formattedField.name);
        if (selectorInput && !selectorInput.connection.getShadowDom()) {
          const shadowXml = document.createElement('shadow');
          shadowXml.setAttribute('type', formattedField.shadow.type);

          const fields = formattedField.shadow.fields;

          Object.keys(fields).forEach((key) => {
            const fieldXml = document.createElement('field');
            fieldXml.setAttribute('name', key);
            fieldXml.textContent = fields[key];

            shadowXml.appendChild(fieldXml);
          });

          selectorInput.connection.setShadowDom(shadowXml);
        }
      });
    },
  };

  if (blockConfig.generator) {
    javascriptGenerator.forBlock[name] = blockConfig.generator as any;
  } else {
    javascriptGenerator.forBlock[name] = function (block, generator) {
      return '/* Generator not implemented */';
    };
  }

  return {
    kind: 'block',
    type: name,
    ...inputs ? { inputs } : {},
  };
};

export default blockConstructor;
"""

Blockly Types
"""
export type BlockGenerator = (block: Block, generator: CodeGenerator) => [string, number] | string | null;
/**
 * Class for a code generator that translates the blocks into a language.
 */
export declare class CodeGenerator {
    name_: string;
    /**
     * A dictionary of block generator functions, keyed by block type.
     * Each block generator function takes two parameters:
     *
     * - the Block to generate code for, and
     * - the calling CodeGenerator (or subclass) instance, so the
     *   function can call methods defined below (e.g. blockToCode) or
     *   on the relevant subclass (e.g. JavascripGenerator),
     *
     * and returns:
     *
     * - a [code, precedence] tuple (for value/expression blocks), or
     * - a string containing the generated code (for statement blocks), or
     * - null if no code should be emitted for block.
     */
    forBlock: Record<string, (block: Block, generator: this) => [string, number] | string | null>;
    /**
     * This is used as a placeholder in functions defined using
     * CodeGenerator.provideFunction_.  It must not be legal code that could
     * legitimately appear in a function definition (or comment), and it must
     * not confuse the regular expression parser.
     */
    FUNCTION_NAME_PLACEHOLDER_: string;
    FUNCTION_NAME_PLACEHOLDER_REGEXP_: RegExp;
    /**
     * Arbitrary code to inject into locations that risk causing infinite loops.
     * Any instances of '%1' will be replaced by the block ID that failed.
     * E.g. `  checkTimeout(%1);\n`
     */
    INFINITE_LOOP_TRAP: string | null;
    /**
     * Arbitrary code to inject before every statement.
     * Any instances of '%1' will be replaced by the block ID of the statement.
     * E.g. `highlight(%1);\n`
     */
    STATEMENT_PREFIX: string | null;
    /**
     * Arbitrary code to inject after every statement.
     * Any instances of '%1' will be replaced by the block ID of the statement.
     * E.g. `highlight(%1);\n`
     */
    STATEMENT_SUFFIX: string | null;
    /**
     * The method of indenting.  Defaults to two spaces, but language generators
     * may override this to increase indent or change to tabs.
     */
    INDENT: string;
    /**
     * Maximum length for a comment before wrapping.  Does not account for
     * indenting level.
     */
    COMMENT_WRAP: number;
    /** List of outer-inner pairings that do NOT require parentheses. */
    ORDER_OVERRIDES: number[][];
    /**
     * Whether the init method has been called.
     * Generators that set this flag to false after creation and true in init
     * will cause blockToCode to emit a warning if the generator has not been
     * initialized. If this flag is untouched, it will have no effect.
     */
    isInitialized: boolean | null;
    /** Comma-separated list of reserved words. */
    protected RESERVED_WORDS_: string;
    /** A dictionary of definitions to be printed before the code. */
    protected definitions_: {
        [key: string]: string;
    };
    /**
     * A dictionary mapping desired function names in definitions_ to actual
     * function names (to avoid collisions with user functions).
     */
    protected functionNames_: {
        [key: string]: string;
    };
    /** A database of variable and procedure names. */
    nameDB_?: Names;
    /** @param name Language name of this generator. */
    constructor(name: string);
    /**
     * Generate code for all blocks in the workspace to the specified language.
     *
     * @param workspace Workspace to generate code from.
     * @returns Generated code.
     */
    workspaceToCode(workspace?: Workspace): string;
    /**
     * Prepend a common prefix onto each line of code.
     * Intended for indenting code or adding comment markers.
     *
     * @param text The lines of code.
     * @param prefix The common prefix.
     * @returns The prefixed lines of code.
     */
    prefixLines(text: string, prefix: string): string;
    /**
     * Recursively spider a tree of blocks, returning all their comments.
     *
     * @param block The block from which to start spidering.
     * @returns Concatenated list of comments.
     */
    allNestedComments(block: Block): string;
    /**
     * Generate code for the specified block (and attached blocks).
     * The generator must be initialized before calling this function.
     *
     * @param block The block to generate code for.
     * @param opt_thisOnly True to generate code for only this statement.
     * @returns For statement blocks, the generated code.
     *     For value blocks, an array containing the generated code and an
     * operator order value.  Returns '' if block is null.
     */
    blockToCode(block: Block | null, opt_thisOnly?: boolean): string | [string, number];
    /**
     * Generate code representing the specified value input.
     *
     * @param block The block containing the input.
     * @param name The name of the input.
     * @param outerOrder The maximum binding strength (minimum order value) of any
     *     operators adjacent to "block".
     * @returns Generated code or '' if no blocks are connected.
     * @throws ReferenceError if the specified input does not exist.
     */
    valueToCode(block: Block, name: string, outerOrder: number): string;
    /**
     * Generate a code string representing the blocks attached to the named
     * statement input. Indent the code.
     * This is mainly used in generators. When trying to generate code to evaluate
     * look at using workspaceToCode or blockToCode.
     *
     * @param block The block containing the input.
     * @param name The name of the input.
     * @returns Generated code or '' if no blocks are connected.
     * @throws ReferenceError if the specified input does not exist.
     */
    statementToCode(block: Block, name: string): string;
    /**
     * Add an infinite loop trap to the contents of a loop.
     * Add statement suffix at the start of the loop block (right after the loop
     * statement executes), and a statement prefix to the end of the loop block
     * (right before the loop statement executes).
     *
     * @param branch Code for loop contents.
     * @param block Enclosing block.
     * @returns Loop contents, with infinite loop trap added.
     */
    addLoopTrap(branch: string, block: Block): string;
    /**
     * Inject a block ID into a message to replace '%1'.
     * Used for STATEMENT_PREFIX, STATEMENT_SUFFIX, and INFINITE_LOOP_TRAP.
     *
     * @param msg Code snippet with '%1'.
     * @param block Block which has an ID.
     * @returns Code snippet with ID.
     */
    injectId(msg: string, block: Block): string;
    /**
     * Add one or more words to the list of reserved words for this language.
     *
     * @param words Comma-separated list of words to add to the list.
     *     No spaces.  Duplicates are ok.
     */
    addReservedWords(words: string): void;
    /**
     * Define a developer-defined function (not a user-defined procedure) to be
     * included in the generated code.  Used for creating private helper
     * functions. The first time this is called with a given desiredName, the code
     * is saved and an actual name is generated.  Subsequent calls with the same
     * desiredName have no effect but have the same return value.
     *
     * It is up to the caller to make sure the same desiredName is not
     * used for different helper functions (e.g. use "colourRandom" and
     * "listRandom", not "random").  There is no danger of colliding with reserved
     * words, or user-defined variable or procedure names.
     *
     * The code gets output when CodeGenerator.finish() is called.
     *
     * @param desiredName The desired name of the function (e.g. mathIsPrime).
     * @param code A list of statements or one multi-line code string.  Use '  '
     *     for indents (they will be replaced).
     * @returns The actual name of the new function.  This may differ from
     *     desiredName if the former has already been taken by the user.
     */
    provideFunction_(desiredName: string, code: string[] | string): string;
    /**
     * Gets a unique, legal name for a user-defined variable.
     * Before calling this method, the `nameDB_` property of the class
     * must have been initialized already. This is typically done in
     * the `init` function of the code generator class.
     *
     * @param nameOrId The ID of the variable to get a name for,
     *    or the proposed name for a variable not associated with an id.
     * @returns A unique, legal name for the variable.
     */
    getVariableName(nameOrId: string): string;
    /**
     * Gets a unique, legal name for a user-defined procedure.
     * Before calling this method, the `nameDB_` property of the class
     * must have been initialized already. This is typically done in
     * the `init` function of the code generator class.
     *
     * @param name The proposed name for a procedure.
     * @returns A unique, legal name for the procedure.
     */
    getProcedureName(name: string): string;
    private getName;
    /**
     * Hook for code to run before code generation starts.
     * Subclasses may override this, e.g. to initialise the database of variable
     * names.
     *
     * @param _workspace Workspace to generate code from.
     */
    init(_workspace: Workspace): void;
    /**
     * Common tasks for generating code from blocks.  This is called from
     * blockToCode and is called on every block, not just top level blocks.
     * Subclasses may override this, e.g. to generate code for statements
     * following the block, or to handle comments for the specified block and any
     * connected value blocks.
     *
     * @param _block The current block.
     * @param code The code created for this block.
     * @param _opt_thisOnly True to generate code for only this statement.
     * @returns Code with comments and subsequent blocks added.
     */
    scrub_(_block: Block, code: string, _opt_thisOnly?: boolean): string;
    /**
     * Hook for code to run at end of code generation.
     * Subclasses may override this, e.g. to prepend the generated code with
     * import statements or variable definitions.
     *
     * @param code Generated code.
     * @returns Completed code.
     */
    finish(code: string): string;
    /**
     * Naked values are top-level blocks with outputs that aren't plugged into
     * anything.
     * Subclasses may override this, e.g. if their language does not allow
     * naked values.
     *
     * @param line Line of generated code.
     * @returns Legal line of code.
     */
    scrubNakedValue(line: string): string;
}

export declare enum Order {
    ATOMIC = 0,// 0 "" ...
    NEW = 1.1,// new
    MEMBER = 1.2,// . []
    FUNCTION_CALL = 2,// ()
    INCREMENT = 3,// ++
    DECREMENT = 3,// --
    BITWISE_NOT = 4.1,// ~
    UNARY_PLUS = 4.2,// +
    UNARY_NEGATION = 4.3,// -
    LOGICAL_NOT = 4.4,// !
    TYPEOF = 4.5,// typeof
    VOID = 4.6,// void
    DELETE = 4.7,// delete
    AWAIT = 4.8,// await
    EXPONENTIATION = 5,// **
    MULTIPLICATION = 5.1,// *
    DIVISION = 5.2,// /
    MODULUS = 5.3,// %
    SUBTRACTION = 6.1,// -
    ADDITION = 6.2,// +
    BITWISE_SHIFT = 7,// << >> >>>
    RELATIONAL = 8,// < <= > >=
    IN = 8,// in
    INSTANCEOF = 8,// instanceof
    EQUALITY = 9,// == != === !==
    BITWISE_AND = 10,// &
    BITWISE_XOR = 11,// ^
    BITWISE_OR = 12,// |
    LOGICAL_AND = 13,// &&
    LOGICAL_OR = 14,// ||
    CONDITIONAL = 15,// ?:
    ASSIGNMENT = 16,// = += -= **= *= /= %= <<= >>= ...
    YIELD = 17,// yield
    COMMA = 18,// ,
    NONE = 99
}
/**
 * JavaScript code generator class.
 */
export declare class JavascriptGenerator extends CodeGenerator {
    /** List of outer-inner pairings that do NOT require parentheses. */
    ORDER_OVERRIDES: [Order, Order][];
    /** @param name Name of the language the generator is for. */
    constructor(name?: string);
    /**
     * Initialise the database of variable names.
     *
     * @param workspace Workspace to generate code from.
     */
    init(workspace: Workspace): void;
    /**
     * Prepend the generated code with the variable definitions.
     *
     * @param code Generated code.
     * @returns Completed code.
     */
    finish(code: string): string;
    /**
     * Naked values are top-level blocks with outputs that aren't plugged into
     * anything.  A trailing semicolon is needed to make this legal.
     *
     * @param line Line of generated code.
     * @returns Legal line of code.
     */
    scrubNakedValue(line: string): string;
    /**
     * Encode a string as a properly escaped JavaScript string, complete with
     * quotes.
     *
     * @param string Text to encode.
     * @returns JavaScript string.
     */
    quote_(string: string): string;
    /**
     * Encode a string as a properly escaped multiline JavaScript string, complete
     * with quotes.
     * @param string Text to encode.
     * @returns JavaScript string.
     */
    multiline_quote_(string: string): string;
    /**
     * Common tasks for generating JavaScript from blocks.
     * Handles comments for the specified block and any connected value blocks.
     * Calls any statements following this block.
     *
     * @param block The current block.
     * @param code The JavaScript code created for this block.
     * @param thisOnly True to generate code for only this statement.
     * @returns JavaScript code with comments and subsequent blocks added.
     */
    scrub_(block: Block, code: string, thisOnly?: boolean): string;
    /**
     * Generate code representing the specified value input, adjusted to take into
     * account indexing (zero- or one-based) and optionally by a specified delta
     * and/or by negation.
     *
     * @param block The block.
     * @param atId The ID of the input block to get (and adjust) the value of.
     * @param delta Value to add.
     * @param negate Whether to negate the value.
     * @param order The highest order acting on this value.
     * @returns The adjusted value or code that evaluates to it.
     */
    getAdjusted(block: Block, atId: string, delta?: number, negate?: boolean, order?: Order): string;
}
"""

exemplo de implementação 1 do blockConstructor.ts
"""
import * as Blockly from 'blockly/core';
import Colors from '../../../config/colors';
import BlocklyTypes from '../../../config/types';
import blockConstructor from '../../../helpers/blockConstructor';
import { Order } from 'blockly/javascript';

const setBlockGetElementInnerText = () => {
    return blockConstructor({
        colour: Colors.HTML,
        hasOutput: 'String',
        helpUrl: 'https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText',
        message: 'obter o texto de\n%1',
        name: 'BlockGetElementInnerText',
        tooltip: 'Extrai o innerText de um elemento HTML armazenado em uma variável.',
        fields: [
            {
                type: 'field_variable',
                name: 'ELEMENT',
                variable: BlocklyTypes.htmlElementVariable,
                variableTypes: [''],
            }
        ],
        generator: function (block: Blockly.Block, generator: Blockly.CodeGenerator) {
            const varName = generator.nameDB_?.getName(block.getFieldValue('ELEMENT'), Blockly.VARIABLE_CATEGORY_NAME);

            const code = `${varName}.innerText`;
            return [code, Order.MEMBER];
        },
    });
};

export default setBlockGetElementInnerText;
"""

exemplo de implementação 2 do blockConstructor.ts
"""
import * as Blockly from 'blockly/core';
import Colors from '../../../config/colors';
import blockConstructor from '../../../helpers/blockConstructor';
import { Order } from 'blockly/javascript';

const setBlockSelectHTMLElement = () => {
  return blockConstructor({
    colour: Colors.HTML,
    hasOutput: 'String',
    helpUrl: 'https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Variables',
    message: 'seletor de elemento %1\nTipo de seletor %2',
    name: 'BlockSelectHTMLElement',
    tooltip: 'Variável que armazena um elemento HTML.',
    fields: [
      {
        type: 'input_value',
        name: 'SELECTOR',
        shadow: {
          type: 'text',
          fields: {
            TEXT: 'div'
          }
        }
      },
      {
        type: 'field_dropdown',
        name: 'TARGET_SELECTOR',
        options: [
          ['XPath', 'xpath'],
          ['CSS', 'css'],
          ['ID', 'id'],
          ['Class', 'class'],
          ['Tag', 'tag'],
        ],
      },
    ],
    generator: function (block: Blockly.Block, generator: Blockly.CodeGenerator) {
      const selector =
        generator.valueToCode(block, 'SELECTOR', Order.ATOMIC) || '""';
      const target = block.getFieldValue('TARGET_SELECTOR');
      let code = '';

      switch (target) {
        case 'css':
          code = `document.querySelector(${selector})`;
          break;
        case 'id':
          code = `document.getElementById(${selector})`;
          break;
        case 'class':
          code = `document.getElementsByClassName(${selector})[0]`;
          break;
        case 'tag':
          code = `document.getElementsByTagName(${selector})[0]`;
          break;
        case 'xpath':
          code = `document.evaluate(${selector}, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue`;
          break;
        default:
          code = `document.querySelector(${selector})`;
      }

      return [code, Order.ATOMIC];
    },
  });
};

export default setBlockSelectHTMLElement;
"""

exemplo de implementação 3 do blockConstructor.ts
"""
import * as Blockly from 'blockly/core';
import { Order } from "blockly/javascript";
import Colors from "../../../config/colors";
import blockConstructor from "../../../helpers/blockConstructor";

const setBlockAiConditional = () => {
    return blockConstructor({
        colour: Colors.AI,
        hasPreviousConnection: null,
        hasNextConnection: null,
        helpUrl: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else',
        message: 'pergunta de sim ou não\n%1\nse sim\n%2\nsenao\n%3',
        name: 'BlockAiConditional',
        tooltip: 'Pergunta ao usuário e executa um bloco de código se a resposta for verdadeira e outro se for falsa.',
        fields: [ // TODO: Implementar async await
            {
                type: 'input_value',
                name: 'PROMPT',
                shadow: {
                    type: 'text',
                    fields: {
                        TEXT: 'Digite o prompt'
                    }
                },
            },
            {
                type: 'input_statement',
                name: 'IF_BRANCH',
            },
            {
                type: 'input_statement',
                name: 'ELSE_BRANCH',
            },
        ],
        generator: function (block: Blockly.Block, generator: Blockly.CodeGenerator) {
            const promptCode = generator.valueToCode(block, 'PROMPT', Order.ATOMIC) || '""';
            const branchIf = generator.statementToCode(block, 'IF_BRANCH');
            const branchElse = generator.statementToCode(block, 'ELSE_BRANCH');

            const code =
                'const aiBooleanResponse = await getAIResponde(' + promptCode + ');\n' +
                'if (aiBooleanResponse) {\n' +
                branchIf +
                '} else {\n' +
                branchElse +
                '}\n';

            return code;
        },
    });
};

export default setBlockAiConditional;
"""

---

Dado esses códigos, quero criar o conteudo da função generator para o seguinte custom block:

